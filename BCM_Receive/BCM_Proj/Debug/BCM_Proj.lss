
BCM_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000100c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000100c  000010a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  00800076  00800076  000010b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024a6  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e84  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000238e  00000000  00000000  000047ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd4  00000000  00000000  00006b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015de  00000000  00000000  00007910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001daa  00000000  00000000  00008eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000ac98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_12>
      34:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 02 	call	0x538	; 0x538 <main>
      8a:	0c 94 04 08 	jmp	0x1008	; 0x1008 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Led_Init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	88 2f       	mov	r24, r24
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	80 32       	cpi	r24, 0x20	; 32
      a6:	91 05       	cpc	r25, r1
      a8:	c1 f0       	breq	.+48     	; 0xda <Led_Init+0x48>
      aa:	81 32       	cpi	r24, 0x21	; 33
      ac:	91 05       	cpc	r25, r1
      ae:	1c f4       	brge	.+6      	; 0xb6 <Led_Init+0x24>
      b0:	40 97       	sbiw	r24, 0x10	; 16
      b2:	41 f0       	breq	.+16     	; 0xc4 <Led_Init+0x32>
      b4:	33 c0       	rjmp	.+102    	; 0x11c <Led_Init+0x8a>
      b6:	80 34       	cpi	r24, 0x40	; 64
      b8:	91 05       	cpc	r25, r1
      ba:	d1 f0       	breq	.+52     	; 0xf0 <Led_Init+0x5e>
      bc:	80 38       	cpi	r24, 0x80	; 128
      be:	91 05       	cpc	r25, r1
      c0:	11 f1       	breq	.+68     	; 0x106 <Led_Init+0x74>
      c2:	2c c0       	rjmp	.+88     	; 0x11c <Led_Init+0x8a>
      c4:	4f ef       	ldi	r20, 0xFF	; 255
      c6:	60 e1       	ldi	r22, 0x10	; 16
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Gpio_PinDirection>
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	60 e1       	ldi	r22, 0x10	; 16
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 95 03 	call	0x72a	; 0x72a <Gpio_PinWrite>
      d8:	21 c0       	rjmp	.+66     	; 0x11c <Led_Init+0x8a>
      da:	4f ef       	ldi	r20, 0xFF	; 255
      dc:	60 e2       	ldi	r22, 0x20	; 32
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Gpio_PinDirection>
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	60 e2       	ldi	r22, 0x20	; 32
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 95 03 	call	0x72a	; 0x72a <Gpio_PinWrite>
      ee:	16 c0       	rjmp	.+44     	; 0x11c <Led_Init+0x8a>
      f0:	4f ef       	ldi	r20, 0xFF	; 255
      f2:	60 e4       	ldi	r22, 0x40	; 64
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Gpio_PinDirection>
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	60 e4       	ldi	r22, 0x40	; 64
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 95 03 	call	0x72a	; 0x72a <Gpio_PinWrite>
     104:	0b c0       	rjmp	.+22     	; 0x11c <Led_Init+0x8a>
     106:	4f ef       	ldi	r20, 0xFF	; 255
     108:	60 e8       	ldi	r22, 0x80	; 128
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Gpio_PinDirection>
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	60 e8       	ldi	r22, 0x80	; 128
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	0e 94 95 03 	call	0x72a	; 0x72a <Gpio_PinWrite>
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	0f 90       	pop	r0
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <Led_Tog>:
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	89 83       	std	Y+1, r24	; 0x01
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	80 32       	cpi	r24, 0x20	; 32
     13a:	91 05       	cpc	r25, r1
     13c:	91 f0       	breq	.+36     	; 0x162 <Led_Tog+0x3c>
     13e:	81 32       	cpi	r24, 0x21	; 33
     140:	91 05       	cpc	r25, r1
     142:	1c f4       	brge	.+6      	; 0x14a <Led_Tog+0x24>
     144:	40 97       	sbiw	r24, 0x10	; 16
     146:	41 f0       	breq	.+16     	; 0x158 <Led_Tog+0x32>
     148:	1b c0       	rjmp	.+54     	; 0x180 <Led_Tog+0x5a>
     14a:	80 34       	cpi	r24, 0x40	; 64
     14c:	91 05       	cpc	r25, r1
     14e:	71 f0       	breq	.+28     	; 0x16c <Led_Tog+0x46>
     150:	80 38       	cpi	r24, 0x80	; 128
     152:	91 05       	cpc	r25, r1
     154:	81 f0       	breq	.+32     	; 0x176 <Led_Tog+0x50>
     156:	14 c0       	rjmp	.+40     	; 0x180 <Led_Tog+0x5a>
     158:	60 e1       	ldi	r22, 0x10	; 16
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 34 04 	call	0x868	; 0x868 <Gpio_PinToggle>
     160:	0f c0       	rjmp	.+30     	; 0x180 <Led_Tog+0x5a>
     162:	60 e2       	ldi	r22, 0x20	; 32
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 34 04 	call	0x868	; 0x868 <Gpio_PinToggle>
     16a:	0a c0       	rjmp	.+20     	; 0x180 <Led_Tog+0x5a>
     16c:	60 e4       	ldi	r22, 0x40	; 64
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 34 04 	call	0x868	; 0x868 <Gpio_PinToggle>
     174:	05 c0       	rjmp	.+10     	; 0x180 <Led_Tog+0x5a>
     176:	60 e8       	ldi	r22, 0x80	; 128
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 34 04 	call	0x868	; 0x868 <Gpio_PinToggle>
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <BCM_Init>:
 * @param CallBkFun: A pointer to a function to be called when receiving/Sending Finish
 * @return Status: of the initialization according to the Error handling macros 
 **/

EnmBCMError_t BCM_Init(ptrBCMFunCallBk_t CallBkFun)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	00 d0       	rcall	.+0      	; 0x190 <BCM_Init+0x6>
     190:	1f 92       	push	r1
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	9b 83       	std	Y+3, r25	; 0x03
     198:	8a 83       	std	Y+2, r24	; 0x02
	EnmBCMError_t API_State = OK_t;
     19a:	19 82       	std	Y+1, r1	; 0x01
	StrBCM_Cfg.Bcm_ID = BCM_ID;
     19c:	81 e4       	ldi	r24, 0x41	; 65
     19e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <StrBCM_Cfg>
	gEnumBcm_Rx_Lock = UNLOCKED;
     1a2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gEnumBcm_Rx_Lock>
	gEnumBcm_Tx_Lock = UNLOCKED;
     1a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <gEnumBcm_Tx_Lock>

	/* The Call Back Setup */
	if( NULL != CallBkFun)
     1aa:	8a 81       	ldd	r24, Y+2	; 0x02
     1ac:	9b 81       	ldd	r25, Y+3	; 0x03
     1ae:	89 2b       	or	r24, r25
     1b0:	41 f1       	breq	.+80     	; 0x202 <BCM_Init+0x78>
	{
		switch(StrBCM_Cfg.BCM_Rx_or_Tx)
     1b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <StrBCM_Cfg+0x1>
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	91 05       	cpc	r25, r1
     1be:	31 f0       	breq	.+12     	; 0x1cc <BCM_Init+0x42>
     1c0:	82 30       	cpi	r24, 0x02	; 2
     1c2:	91 05       	cpc	r25, r1
     1c4:	89 f0       	breq	.+34     	; 0x1e8 <BCM_Init+0x5e>
     1c6:	89 2b       	or	r24, r25
     1c8:	41 f0       	breq	.+16     	; 0x1da <BCM_Init+0x50>
			case SEND_RECEIVE_MODE:
			StrBCM_Cfg.BCMPtr_Rx_FuncCallBk = CallBkFun;
			StrBCM_Cfg.BCMPtr_Tx_FuncCallBk = CallBkFun;
			break;
			default:
			break;
     1ca:	1d c0       	rjmp	.+58     	; 0x206 <BCM_Init+0x7c>
	if( NULL != CallBkFun)
	{
		switch(StrBCM_Cfg.BCM_Rx_or_Tx)
		{
			case RECEIVE_MODE:
			StrBCM_Cfg.BCMPtr_Rx_FuncCallBk = CallBkFun;
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	9b 81       	ldd	r25, Y+3	; 0x03
     1d0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <StrBCM_Cfg+0x3>
     1d4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <StrBCM_Cfg+0x2>
			break;
     1d8:	16 c0       	rjmp	.+44     	; 0x206 <BCM_Init+0x7c>
			case SEND_MODE:
			StrBCM_Cfg.BCMPtr_Tx_FuncCallBk = CallBkFun;
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	9b 81       	ldd	r25, Y+3	; 0x03
     1de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <StrBCM_Cfg+0x5>
     1e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <StrBCM_Cfg+0x4>
			break;
     1e6:	0f c0       	rjmp	.+30     	; 0x206 <BCM_Init+0x7c>
			case SEND_RECEIVE_MODE:
			StrBCM_Cfg.BCMPtr_Rx_FuncCallBk = CallBkFun;
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	9b 81       	ldd	r25, Y+3	; 0x03
     1ec:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <StrBCM_Cfg+0x3>
     1f0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <StrBCM_Cfg+0x2>
			StrBCM_Cfg.BCMPtr_Tx_FuncCallBk = CallBkFun;
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	9b 81       	ldd	r25, Y+3	; 0x03
     1f8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <StrBCM_Cfg+0x5>
     1fc:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <StrBCM_Cfg+0x4>
			break;
     200:	02 c0       	rjmp	.+4      	; 0x206 <BCM_Init+0x7c>
			break;
		}
	}
	else
	{
		API_State = INVALID_POINTER_TO_FUNCTION;
     202:	89 e0       	ldi	r24, 0x09	; 9
     204:	89 83       	std	Y+1, r24	; 0x01
	}
	
	switch(Communication_type)
     206:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Communication_type>
     20a:	88 2f       	mov	r24, r24
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	91 05       	cpc	r25, r1
     212:	69 f0       	breq	.+26     	; 0x22e <BCM_Init+0xa4>
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	91 05       	cpc	r25, r1
     218:	61 f0       	breq	.+24     	; 0x232 <BCM_Init+0xa8>
     21a:	89 2b       	or	r24, r25
     21c:	09 f0       	breq	.+2      	; 0x220 <BCM_Init+0x96>
			break;
		case I2C:
			// N
			break;
		default:
			break;
     21e:	0a c0       	rjmp	.+20     	; 0x234 <BCM_Init+0xaa>
	
	switch(Communication_type)
	{
		case UART:
			/* UART Setup */
			UART_Init();
     220:	0e 94 72 06 	call	0xce4	; 0xce4 <UART_Init>
			UART_SetCallBack(BCM_Tx_Callback);
     224:	87 e8       	ldi	r24, 0x87	; 135
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_SetCallBack>
			break;
     22c:	03 c0       	rjmp	.+6      	; 0x234 <BCM_Init+0xaa>
		case SPI:
			// N
			break;
     22e:	00 00       	nop
     230:	01 c0       	rjmp	.+2      	; 0x234 <BCM_Init+0xaa>
		case I2C:
			// N
			break;
     232:	00 00       	nop
		default:
			break;
	}
	return API_State;
     234:	89 81       	ldd	r24, Y+1	; 0x01
}
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <BCM_Rx_SetupBuffer>:
 * @param Buffer : A pointer to the Buffer in the App Layer
 * @param Size : the Size of the Buffer in the App Layer
 * @return Status: of the Setup according to the Error handling
 **/
EnmBCMError_t BCM_Rx_SetupBuffer(uint8 *Buffer,uint16 Size)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <BCM_Rx_SetupBuffer+0x6>
     248:	00 d0       	rcall	.+0      	; 0x24a <BCM_Rx_SetupBuffer+0x8>
     24a:	1f 92       	push	r1
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	9b 83       	std	Y+3, r25	; 0x03
     252:	8a 83       	std	Y+2, r24	; 0x02
     254:	7d 83       	std	Y+5, r23	; 0x05
     256:	6c 83       	std	Y+4, r22	; 0x04
	EnmBCMError_t API_State = OK_t;
     258:	19 82       	std	Y+1, r1	; 0x01
	
	if( UNLOCKED == gEnumBcm_Rx_Lock)
     25a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gEnumBcm_Rx_Lock>
     25e:	88 23       	and	r24, r24
     260:	f9 f4       	brne	.+62     	; 0x2a0 <BCM_Rx_SetupBuffer+0x5e>
	{
		if(NULL != Buffer)
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	9b 81       	ldd	r25, Y+3	; 0x03
     266:	89 2b       	or	r24, r25
     268:	c1 f0       	breq	.+48     	; 0x29a <BCM_Rx_SetupBuffer+0x58>
		{
			gStrBcmBuffer.PtrFunc = Buffer;
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <gStrBcmBuffer+0x1>
     272:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gStrBcmBuffer>
			gStrBcmBuffer.BufferSize = Size;
     276:	8c 81       	ldd	r24, Y+4	; 0x04
     278:	9d 81       	ldd	r25, Y+5	; 0x05
     27a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gStrBcmBuffer+0x3>
     27e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gStrBcmBuffer+0x2>
			gStrBcmBuffer.CheckSum = INITIAL_VALUE_ZERO;
     282:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <gStrBcmBuffer+0x4>
			gBufferRxIndex = INITIAL_VALUE_ZERO;
     286:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x1>
     28a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
			gEnumBcm_Rx_state = ID_RECEIVE_STATE;
     28e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <gEnumBcm_Rx_state>
			gEnumBcm_SizeFlag = FIRST_BYTE;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <BCM_Rx_SetupBuffer+0x62>
		}
		else
		{
			API_State = INVALID_POINTER_TO_BUFFER;
     29a:	88 e0       	ldi	r24, 0x08	; 8
     29c:	89 83       	std	Y+1, r24	; 0x01
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <BCM_Rx_SetupBuffer+0x62>
		}
	}
	else
	{
		API_State = BUFFER_LOCKED;
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return API_State;
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
}
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <BCM_RxDispatcher>:
 * Function : BCM_RxDispatcher
 * Description: This Function is used to handling the receiving in run time
 * @return Status: of the Setup according to the Error handling
 **/
EnmBCMError_t BCM_RxDispatcher(void)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	EnmBCMError_t API_State = OK_t;
     2c0:	19 82       	std	Y+1, r1	; 0x01
	if( LOCKED == gEnumBcm_Rx_Lock )
     2c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gEnumBcm_Rx_Lock>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	09 f0       	breq	.+2      	; 0x2cc <BCM_RxDispatcher+0x16>
     2ca:	dd c0       	rjmp	.+442    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		if( RECEIVED == gEnumBcm_Rx_Flag )
     2cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2d0:	88 23       	and	r24, r24
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <BCM_RxDispatcher+0x20>
     2d4:	d8 c0       	rjmp	.+432    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		{
			gEnumBcm_Rx_Flag = NOT_RECEIVED;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			switch( gEnumBcm_Rx_state )
     2dc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gEnumBcm_Rx_state>
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	91 05       	cpc	r25, r1
     2e8:	51 f1       	breq	.+84     	; 0x33e <BCM_RxDispatcher+0x88>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	91 05       	cpc	r25, r1
     2ee:	1c f4       	brge	.+6      	; 0x2f6 <BCM_RxDispatcher+0x40>
     2f0:	89 2b       	or	r24, r25
     2f2:	49 f0       	breq	.+18     	; 0x306 <BCM_RxDispatcher+0x50>
     2f4:	c8 c0       	rjmp	.+400    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	91 05       	cpc	r25, r1
     2fa:	09 f4       	brne	.+2      	; 0x2fe <BCM_RxDispatcher+0x48>
     2fc:	76 c0       	rjmp	.+236    	; 0x3ea <BCM_RxDispatcher+0x134>
     2fe:	03 97       	sbiw	r24, 0x03	; 3
     300:	09 f4       	brne	.+2      	; 0x304 <BCM_RxDispatcher+0x4e>
     302:	9f c0       	rjmp	.+318    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     304:	c0 c0       	rjmp	.+384    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			{
			case ID_RECEIVE_STATE:
					if( gStrBcmBuffer.PtrFunc[ID_BYTE] == StrBCM_Cfg.Bcm_ID )
     306:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gStrBcmBuffer>
     30a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gStrBcmBuffer+0x1>
     30e:	fc 01       	movw	r30, r24
     310:	90 81       	ld	r25, Z
     312:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <StrBCM_Cfg>
     316:	98 17       	cp	r25, r24
     318:	69 f4       	brne	.+26     	; 0x334 <BCM_RxDispatcher+0x7e>
					{
						gBufferRxIndex++;
     31a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     31e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     328:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
						gEnumBcm_Rx_state = SIZE_RECEIVE_STATE;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gEnumBcm_Rx_state>
					else
					{
						API_State = INVALID_ID;
						BCM_DeInit();
					}
					break;
     332:	a9 c0       	rjmp	.+338    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
						gBufferRxIndex++;
						gEnumBcm_Rx_state = SIZE_RECEIVE_STATE;
					}
					else
					{
						API_State = INVALID_ID;
     334:	8a e0       	ldi	r24, 0x0A	; 10
     336:	89 83       	std	Y+1, r24	; 0x01
						BCM_DeInit();
     338:	0e 94 48 02 	call	0x490	; 0x490 <BCM_DeInit>
					}
					break;
     33c:	a4 c0       	rjmp	.+328    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			case SIZE_RECEIVE_STATE:
					if( FIRST_BYTE == gEnumBcm_SizeFlag )
     33e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gEnumBcm_SizeFlag>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	d1 f4       	brne	.+52     	; 0x37a <BCM_RxDispatcher+0xc4>
					{
						gBufferRxSize = gStrBcmBuffer.PtrFunc[FIRST_BYTE];
     346:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gStrBcmBuffer>
     34a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gStrBcmBuffer+0x1>
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <gBufferRxSize+0x1>
     35c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gBufferRxSize>
						gBufferRxIndex++;
     360:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     364:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     36e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
						gEnumBcm_SizeFlag = SECOND_BYTE;	
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>
					}
					else
					{
						// Do Nothing
					}
				break;
     378:	83 c0       	rjmp	.+262    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
					{
						gBufferRxSize = gStrBcmBuffer.PtrFunc[FIRST_BYTE];
						gBufferRxIndex++;
						gEnumBcm_SizeFlag = SECOND_BYTE;	
					}
					else if( SECOND_BYTE == gEnumBcm_SizeFlag )
     37a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gEnumBcm_SizeFlag>
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	09 f0       	breq	.+2      	; 0x384 <BCM_RxDispatcher+0xce>
     382:	7e c0       	rjmp	.+252    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
					{
						gBufferRxSize |= ( gStrBcmBuffer.PtrFunc[SECOND_BYTE] << SHIFT_FACTOR );
     384:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gStrBcmBuffer>
     388:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gStrBcmBuffer+0x1>
     38c:	02 96       	adiw	r24, 0x02	; 2
     38e:	fc 01       	movw	r30, r24
     390:	80 81       	ld	r24, Z
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	98 2f       	mov	r25, r24
     398:	88 27       	eor	r24, r24
     39a:	9c 01       	movw	r18, r24
     39c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gBufferRxSize>
     3a0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <gBufferRxSize+0x1>
     3a4:	82 2b       	or	r24, r18
     3a6:	93 2b       	or	r25, r19
     3a8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <gBufferRxSize+0x1>
     3ac:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gBufferRxSize>
						gBufferRxIndex++;
     3b0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     3b4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     3be:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
						
						if( gBufferRxSize <= gStrBcmBuffer.BufferSize )
     3c2:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <gStrBcmBuffer+0x2>
     3c6:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <gStrBcmBuffer+0x3>
     3ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gBufferRxSize>
     3ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <gBufferRxSize+0x1>
     3d2:	28 17       	cp	r18, r24
     3d4:	39 07       	cpc	r19, r25
     3d6:	20 f0       	brcs	.+8      	; 0x3e0 <BCM_RxDispatcher+0x12a>
						{
							gEnumBcm_Rx_state = DATA_RECEIVE_STATE;
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gEnumBcm_Rx_state>
					}
					else
					{
						// Do Nothing
					}
				break;
     3de:	50 c0       	rjmp	.+160    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
						{
							gEnumBcm_Rx_state = DATA_RECEIVE_STATE;
						}
						else
						{
							API_State = INVALID_DATA_LENGTH;
     3e0:	86 e0       	ldi	r24, 0x06	; 6
     3e2:	89 83       	std	Y+1, r24	; 0x01
							BCM_DeInit();	
     3e4:	0e 94 48 02 	call	0x490	; 0x490 <BCM_DeInit>
					}
					else
					{
						// Do Nothing
					}
				break;
     3e8:	4b c0       	rjmp	.+150    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			case DATA_RECEIVE_STATE:				
					gStrBcmBuffer.CheckSum += gStrBcmBuffer.PtrFunc[gBufferRxIndex];
     3ea:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <gStrBcmBuffer+0x4>
     3ee:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <gStrBcmBuffer>
     3f2:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <gStrBcmBuffer+0x1>
     3f6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     3fa:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	fc 01       	movw	r30, r24
     404:	80 81       	ld	r24, Z
     406:	84 0f       	add	r24, r20
     408:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gStrBcmBuffer+0x4>
					gBufferRxIndex++;
     40c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     410:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
     41a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
					
					if( (gBufferRxIndex + BCM_OVERHEAD) == gStrBcmBuffer.BufferSize)
     41e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     422:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     426:	9c 01       	movw	r18, r24
     428:	2e 5f       	subi	r18, 0xFE	; 254
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gStrBcmBuffer+0x2>
     430:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gStrBcmBuffer+0x3>
     434:	28 17       	cp	r18, r24
     436:	39 07       	cpc	r19, r25
     438:	29 f5       	brne	.+74     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
					{
						gEnumBcm_Rx_state = CHECKSUM_RECEIVE_STATE;
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gEnumBcm_Rx_state>
					}
					else
					{
						// Do Nothing
					}
				break;
     440:	21 c0       	rjmp	.+66     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case CHECKSUM_RECEIVE_STATE :
					if( gStrBcmBuffer.CheckSum == gStrBcmBuffer.PtrFunc[gBufferRxIndex] )
     442:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <gStrBcmBuffer+0x4>
     446:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <gStrBcmBuffer>
     44a:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <gStrBcmBuffer+0x1>
     44e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     452:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	48 17       	cp	r20, r24
     460:	49 f4       	brne	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
					{
						StrBCM_Cfg.BCMPtr_Rx_FuncCallBk();
     462:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <StrBCM_Cfg+0x2>
     466:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <StrBCM_Cfg+0x3>
     46a:	fc 01       	movw	r30, r24
     46c:	09 95       	icall
						gEnumBcm_Rx_Lock = UNLOCKED;
     46e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gEnumBcm_Rx_Lock>
					else
					{
						API_State = INVALID_CHECK_SUM;
						BCM_DeInit();	
					}
				break;
     472:	09 c0       	rjmp	.+18     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
						StrBCM_Cfg.BCMPtr_Rx_FuncCallBk();
						gEnumBcm_Rx_Lock = UNLOCKED;
					}
					else
					{
						API_State = INVALID_CHECK_SUM;
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	89 83       	std	Y+1, r24	; 0x01
						BCM_DeInit();	
     478:	0e 94 48 02 	call	0x490	; 0x490 <BCM_DeInit>
					}
				break;
     47c:	00 00       	nop
     47e:	03 c0       	rjmp	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
					}
					else
					{
						// Do Nothing
					}
				break;
     480:	00 00       	nop
     482:	01 c0       	rjmp	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
					}
					else
					{
						// Do Nothing
					}
				break;
     484:	00 00       	nop
	}
	else
	{
		// Do Nothing
	}
	return API_State;
     486:	89 81       	ldd	r24, Y+1	; 0x01
}
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <BCM_DeInit>:
 * Function : BCM_DeInit
 * Description: This Function will called to return the BCM to it's Default state
 * @return Status: of the Fu/nction according to the Error handling
 **/
EnmBCMError_t BCM_DeInit(void)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	1f 92       	push	r1
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	EnmBCMError_t API_State = OK;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	89 83       	std	Y+1, r24	; 0x01
	gBufferRxIndex = INITIAL_VALUE_ZERO;
     49e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x1>
     4a2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
	gBufferRxSize = INITIAL_VALUE_ZERO;
     4a6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <gBufferRxSize+0x1>
     4aa:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <gBufferRxSize>
	gEnumBcm_Rx_Lock = UNLOCKED;
     4ae:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gEnumBcm_Rx_Lock>
	gEnumBcm_Tx_Lock = UNLOCKED;
     4b2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <gEnumBcm_Tx_Lock>
	gStrBcmBuffer.BufferSize = INITIAL_VALUE_ZERO;
     4b6:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gStrBcmBuffer+0x3>
     4ba:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <gStrBcmBuffer+0x2>
	gStrBcmBuffer.PtrFunc = NULL;
     4be:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <gStrBcmBuffer+0x1>
     4c2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <gStrBcmBuffer>
	gStrBcmBuffer.CheckSum = INITIAL_VALUE_ZERO;
     4c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <gStrBcmBuffer+0x4>
	gEnumBcm_Rx_state = ID_RECEIVE_STATE;
     4ca:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <gEnumBcm_Rx_state>
	gEnumBcm_Rx_Flag = NOT_RECEIVED;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	gEnumBcm_Tx_Flag = NOT_SENT;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gEnumBcm_Tx_Flag>
	gEnumBcm_SizeFlag = FIRST_BYTE;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gEnumBcm_SizeFlag>

	switch(Communication_type)
     4e0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Communication_type>
     4e4:	88 2f       	mov	r24, r24
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	91 05       	cpc	r25, r1
     4ec:	31 f0       	breq	.+12     	; 0x4fa <BCM_DeInit+0x6a>
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	91 05       	cpc	r25, r1
     4f2:	29 f0       	breq	.+10     	; 0x4fe <BCM_DeInit+0x6e>
     4f4:	89 2b       	or	r24, r25
     4f6:	29 f0       	breq	.+10     	; 0x502 <BCM_DeInit+0x72>
		break;
		case I2C:
		// N
		break;
		default:
		break;
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <BCM_DeInit+0x74>
		case UART:
		//UART_DeInit();
		break;
		case SPI:
		// N
		break;
     4fa:	00 00       	nop
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <BCM_DeInit+0x74>
		case I2C:
		// N
		break;
     4fe:	00 00       	nop
     500:	01 c0       	rjmp	.+2      	; 0x504 <BCM_DeInit+0x74>

	switch(Communication_type)
	{
		case UART:
		//UART_DeInit();
		break;
     502:	00 00       	nop
		// N
		break;
		default:
		break;
	}
	return API_State;
     504:	89 81       	ldd	r24, Y+1	; 0x01
}
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <BCM_Tx_Callback>:
 * Function : BCM_Tx_Callback
 * Description: This Function will called in when ISR fires By the Call back Mechanism
 * @return Void
 **/
void BCM_Tx_Callback(void)
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	gEnumBcm_Tx_Flag = SENT_DONE;
     516:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gEnumBcm_Tx_Flag>
}
     51a:	00 00       	nop
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <led1>:


#define ARRAY_SIZE 100

void led1(void)
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
	Led_Tog(LED0);
     52a:	80 e1       	ldi	r24, 0x10	; 16
     52c:	0e 94 93 00 	call	0x126	; 0x126 <Led_Tog>
}
     530:	00 00       	nop
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <main>:


uint8 arr[ARRAY_SIZE] = {0};

int main(void)
{
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
	Led_Init(LED0);
     540:	80 e1       	ldi	r24, 0x10	; 16
     542:	0e 94 49 00 	call	0x92	; 0x92 <Led_Init>
	BCM_Init(led1);
     546:	81 e9       	ldi	r24, 0x91	; 145
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 c5 00 	call	0x18a	; 0x18a <BCM_Init>
	Interrupts_On();
     54e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Interrupts_On>
	BCM_Rx_SetupBuffer(arr,ARRAY_SIZE);
     552:	64 e6       	ldi	r22, 0x64	; 100
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	83 e8       	ldi	r24, 0x83	; 131
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 21 01 	call	0x242	; 0x242 <BCM_Rx_SetupBuffer>
	while (1)
	{
		BCM_RxDispatcher();
     55e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <BCM_RxDispatcher>
	}
     562:	fd cf       	rjmp	.-6      	; 0x55e <main+0x26>

00000564 <Gpio_PortWrite>:
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	00 d0       	rcall	.+0      	; 0x56a <Gpio_PortWrite+0x6>
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	89 83       	std	Y+1, r24	; 0x01
     570:	6a 83       	std	Y+2, r22	; 0x02
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	91 05       	cpc	r25, r1
     57c:	91 f0       	breq	.+36     	; 0x5a2 <Gpio_PortWrite+0x3e>
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	91 05       	cpc	r25, r1
     582:	1c f4       	brge	.+6      	; 0x58a <Gpio_PortWrite+0x26>
     584:	89 2b       	or	r24, r25
     586:	39 f0       	breq	.+14     	; 0x596 <Gpio_PortWrite+0x32>
     588:	1e c0       	rjmp	.+60     	; 0x5c6 <Gpio_PortWrite+0x62>
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	91 05       	cpc	r25, r1
     58e:	79 f0       	breq	.+30     	; 0x5ae <Gpio_PortWrite+0x4a>
     590:	03 97       	sbiw	r24, 0x03	; 3
     592:	99 f0       	breq	.+38     	; 0x5ba <Gpio_PortWrite+0x56>
     594:	18 c0       	rjmp	.+48     	; 0x5c6 <Gpio_PortWrite+0x62>
     596:	8b e3       	ldi	r24, 0x3B	; 59
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2a 81       	ldd	r18, Y+2	; 0x02
     59c:	fc 01       	movw	r30, r24
     59e:	20 83       	st	Z, r18
     5a0:	12 c0       	rjmp	.+36     	; 0x5c6 <Gpio_PortWrite+0x62>
     5a2:	88 e3       	ldi	r24, 0x38	; 56
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	2a 81       	ldd	r18, Y+2	; 0x02
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
     5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <Gpio_PortWrite+0x62>
     5ae:	85 e3       	ldi	r24, 0x35	; 53
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	2a 81       	ldd	r18, Y+2	; 0x02
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
     5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <Gpio_PortWrite+0x62>
     5ba:	82 e3       	ldi	r24, 0x32	; 50
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	2a 81       	ldd	r18, Y+2	; 0x02
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
     5c4:	00 00       	nop
     5c6:	00 00       	nop
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <Gpio_PinDirection>:
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <Gpio_PinDirection+0x6>
     5d8:	1f 92       	push	r1
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	6a 83       	std	Y+2, r22	; 0x02
     5e2:	4b 83       	std	Y+3, r20	; 0x03
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	88 2f       	mov	r24, r24
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	91 05       	cpc	r25, r1
     5ee:	81 f1       	breq	.+96     	; 0x650 <Gpio_PinDirection+0x7e>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	91 05       	cpc	r25, r1
     5f4:	1c f4       	brge	.+6      	; 0x5fc <Gpio_PinDirection+0x2a>
     5f6:	89 2b       	or	r24, r25
     5f8:	49 f0       	breq	.+18     	; 0x60c <Gpio_PinDirection+0x3a>
     5fa:	90 c0       	rjmp	.+288    	; 0x71c <Gpio_PinDirection+0x14a>
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	91 05       	cpc	r25, r1
     600:	09 f4       	brne	.+2      	; 0x604 <Gpio_PinDirection+0x32>
     602:	48 c0       	rjmp	.+144    	; 0x694 <Gpio_PinDirection+0xc2>
     604:	03 97       	sbiw	r24, 0x03	; 3
     606:	09 f4       	brne	.+2      	; 0x60a <Gpio_PinDirection+0x38>
     608:	67 c0       	rjmp	.+206    	; 0x6d8 <Gpio_PinDirection+0x106>
     60a:	88 c0       	rjmp	.+272    	; 0x71c <Gpio_PinDirection+0x14a>
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	21 f0       	breq	.+8      	; 0x61e <Gpio_PinDirection+0x4c>
     616:	8f 3f       	cpi	r24, 0xFF	; 255
     618:	91 05       	cpc	r25, r1
     61a:	71 f0       	breq	.+28     	; 0x638 <Gpio_PinDirection+0x66>
     61c:	7f c0       	rjmp	.+254    	; 0x71c <Gpio_PinDirection+0x14a>
     61e:	8a e3       	ldi	r24, 0x3A	; 58
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2a e3       	ldi	r18, 0x3A	; 58
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	32 2f       	mov	r19, r18
     62c:	2a 81       	ldd	r18, Y+2	; 0x02
     62e:	20 95       	com	r18
     630:	23 23       	and	r18, r19
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
     636:	0b c0       	rjmp	.+22     	; 0x64e <Gpio_PinDirection+0x7c>
     638:	8a e3       	ldi	r24, 0x3A	; 58
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	2a e3       	ldi	r18, 0x3A	; 58
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	f9 01       	movw	r30, r18
     642:	30 81       	ld	r19, Z
     644:	2a 81       	ldd	r18, Y+2	; 0x02
     646:	23 2b       	or	r18, r19
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
     64c:	00 00       	nop
     64e:	66 c0       	rjmp	.+204    	; 0x71c <Gpio_PinDirection+0x14a>
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	21 f0       	breq	.+8      	; 0x662 <Gpio_PinDirection+0x90>
     65a:	8f 3f       	cpi	r24, 0xFF	; 255
     65c:	91 05       	cpc	r25, r1
     65e:	71 f0       	breq	.+28     	; 0x67c <Gpio_PinDirection+0xaa>
     660:	5d c0       	rjmp	.+186    	; 0x71c <Gpio_PinDirection+0x14a>
     662:	87 e3       	ldi	r24, 0x37	; 55
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	27 e3       	ldi	r18, 0x37	; 55
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	32 2f       	mov	r19, r18
     670:	2a 81       	ldd	r18, Y+2	; 0x02
     672:	20 95       	com	r18
     674:	23 23       	and	r18, r19
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
     67a:	0b c0       	rjmp	.+22     	; 0x692 <Gpio_PinDirection+0xc0>
     67c:	87 e3       	ldi	r24, 0x37	; 55
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	27 e3       	ldi	r18, 0x37	; 55
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	30 81       	ld	r19, Z
     688:	2a 81       	ldd	r18, Y+2	; 0x02
     68a:	23 2b       	or	r18, r19
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
     690:	00 00       	nop
     692:	44 c0       	rjmp	.+136    	; 0x71c <Gpio_PinDirection+0x14a>
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	21 f0       	breq	.+8      	; 0x6a6 <Gpio_PinDirection+0xd4>
     69e:	8f 3f       	cpi	r24, 0xFF	; 255
     6a0:	91 05       	cpc	r25, r1
     6a2:	71 f0       	breq	.+28     	; 0x6c0 <Gpio_PinDirection+0xee>
     6a4:	3b c0       	rjmp	.+118    	; 0x71c <Gpio_PinDirection+0x14a>
     6a6:	84 e3       	ldi	r24, 0x34	; 52
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	24 e3       	ldi	r18, 0x34	; 52
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	32 2f       	mov	r19, r18
     6b4:	2a 81       	ldd	r18, Y+2	; 0x02
     6b6:	20 95       	com	r18
     6b8:	23 23       	and	r18, r19
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 83       	st	Z, r18
     6be:	0b c0       	rjmp	.+22     	; 0x6d6 <Gpio_PinDirection+0x104>
     6c0:	84 e3       	ldi	r24, 0x34	; 52
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	24 e3       	ldi	r18, 0x34	; 52
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	f9 01       	movw	r30, r18
     6ca:	30 81       	ld	r19, Z
     6cc:	2a 81       	ldd	r18, Y+2	; 0x02
     6ce:	23 2b       	or	r18, r19
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
     6d4:	00 00       	nop
     6d6:	22 c0       	rjmp	.+68     	; 0x71c <Gpio_PinDirection+0x14a>
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	21 f0       	breq	.+8      	; 0x6ea <Gpio_PinDirection+0x118>
     6e2:	8f 3f       	cpi	r24, 0xFF	; 255
     6e4:	91 05       	cpc	r25, r1
     6e6:	71 f0       	breq	.+28     	; 0x704 <Gpio_PinDirection+0x132>
     6e8:	18 c0       	rjmp	.+48     	; 0x71a <Gpio_PinDirection+0x148>
     6ea:	81 e3       	ldi	r24, 0x31	; 49
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	21 e3       	ldi	r18, 0x31	; 49
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	32 2f       	mov	r19, r18
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	20 95       	com	r18
     6fc:	23 23       	and	r18, r19
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
     702:	0b c0       	rjmp	.+22     	; 0x71a <Gpio_PinDirection+0x148>
     704:	81 e3       	ldi	r24, 0x31	; 49
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	21 e3       	ldi	r18, 0x31	; 49
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	30 81       	ld	r19, Z
     710:	2a 81       	ldd	r18, Y+2	; 0x02
     712:	23 2b       	or	r18, r19
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
     718:	00 00       	nop
     71a:	00 00       	nop
     71c:	00 00       	nop
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <Gpio_PinWrite>:
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <Gpio_PinWrite+0x6>
     730:	1f 92       	push	r1
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	6a 83       	std	Y+2, r22	; 0x02
     73a:	4b 83       	std	Y+3, r20	; 0x03
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	09 f4       	brne	.+2      	; 0x748 <Gpio_PinWrite+0x1e>
     746:	42 c0       	rjmp	.+132    	; 0x7cc <Gpio_PinWrite+0xa2>
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	09 f0       	breq	.+2      	; 0x74e <Gpio_PinWrite+0x24>
     74c:	86 c0       	rjmp	.+268    	; 0x85a <Gpio_PinWrite+0x130>
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	91 05       	cpc	r25, r1
     758:	b9 f0       	breq	.+46     	; 0x788 <Gpio_PinWrite+0x5e>
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	91 05       	cpc	r25, r1
     75e:	1c f4       	brge	.+6      	; 0x766 <Gpio_PinWrite+0x3c>
     760:	89 2b       	or	r24, r25
     762:	39 f0       	breq	.+14     	; 0x772 <Gpio_PinWrite+0x48>
     764:	7a c0       	rjmp	.+244    	; 0x85a <Gpio_PinWrite+0x130>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	91 05       	cpc	r25, r1
     76a:	c9 f0       	breq	.+50     	; 0x79e <Gpio_PinWrite+0x74>
     76c:	03 97       	sbiw	r24, 0x03	; 3
     76e:	11 f1       	breq	.+68     	; 0x7b4 <Gpio_PinWrite+0x8a>
     770:	74 c0       	rjmp	.+232    	; 0x85a <Gpio_PinWrite+0x130>
     772:	8b e3       	ldi	r24, 0x3B	; 59
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2b e3       	ldi	r18, 0x3B	; 59
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	30 81       	ld	r19, Z
     77e:	2a 81       	ldd	r18, Y+2	; 0x02
     780:	23 2b       	or	r18, r19
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
     786:	21 c0       	rjmp	.+66     	; 0x7ca <Gpio_PinWrite+0xa0>
     788:	88 e3       	ldi	r24, 0x38	; 56
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	28 e3       	ldi	r18, 0x38	; 56
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	f9 01       	movw	r30, r18
     792:	30 81       	ld	r19, Z
     794:	2a 81       	ldd	r18, Y+2	; 0x02
     796:	23 2b       	or	r18, r19
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
     79c:	16 c0       	rjmp	.+44     	; 0x7ca <Gpio_PinWrite+0xa0>
     79e:	85 e3       	ldi	r24, 0x35	; 53
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	25 e3       	ldi	r18, 0x35	; 53
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	30 81       	ld	r19, Z
     7aa:	2a 81       	ldd	r18, Y+2	; 0x02
     7ac:	23 2b       	or	r18, r19
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
     7b2:	0b c0       	rjmp	.+22     	; 0x7ca <Gpio_PinWrite+0xa0>
     7b4:	82 e3       	ldi	r24, 0x32	; 50
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	22 e3       	ldi	r18, 0x32	; 50
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	30 81       	ld	r19, Z
     7c0:	2a 81       	ldd	r18, Y+2	; 0x02
     7c2:	23 2b       	or	r18, r19
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
     7c8:	00 00       	nop
     7ca:	47 c0       	rjmp	.+142    	; 0x85a <Gpio_PinWrite+0x130>
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	91 05       	cpc	r25, r1
     7d6:	c9 f0       	breq	.+50     	; 0x80a <Gpio_PinWrite+0xe0>
     7d8:	82 30       	cpi	r24, 0x02	; 2
     7da:	91 05       	cpc	r25, r1
     7dc:	1c f4       	brge	.+6      	; 0x7e4 <Gpio_PinWrite+0xba>
     7de:	89 2b       	or	r24, r25
     7e0:	39 f0       	breq	.+14     	; 0x7f0 <Gpio_PinWrite+0xc6>
     7e2:	3a c0       	rjmp	.+116    	; 0x858 <Gpio_PinWrite+0x12e>
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	91 05       	cpc	r25, r1
     7e8:	e9 f0       	breq	.+58     	; 0x824 <Gpio_PinWrite+0xfa>
     7ea:	03 97       	sbiw	r24, 0x03	; 3
     7ec:	41 f1       	breq	.+80     	; 0x83e <Gpio_PinWrite+0x114>
     7ee:	34 c0       	rjmp	.+104    	; 0x858 <Gpio_PinWrite+0x12e>
     7f0:	8b e3       	ldi	r24, 0x3B	; 59
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	2b e3       	ldi	r18, 0x3B	; 59
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	f9 01       	movw	r30, r18
     7fa:	20 81       	ld	r18, Z
     7fc:	32 2f       	mov	r19, r18
     7fe:	2a 81       	ldd	r18, Y+2	; 0x02
     800:	20 95       	com	r18
     802:	23 23       	and	r18, r19
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
     808:	27 c0       	rjmp	.+78     	; 0x858 <Gpio_PinWrite+0x12e>
     80a:	88 e3       	ldi	r24, 0x38	; 56
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	28 e3       	ldi	r18, 0x38	; 56
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	32 2f       	mov	r19, r18
     818:	2a 81       	ldd	r18, Y+2	; 0x02
     81a:	20 95       	com	r18
     81c:	23 23       	and	r18, r19
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	1a c0       	rjmp	.+52     	; 0x858 <Gpio_PinWrite+0x12e>
     824:	85 e3       	ldi	r24, 0x35	; 53
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	25 e3       	ldi	r18, 0x35	; 53
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	32 2f       	mov	r19, r18
     832:	2a 81       	ldd	r18, Y+2	; 0x02
     834:	20 95       	com	r18
     836:	23 23       	and	r18, r19
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
     83c:	0d c0       	rjmp	.+26     	; 0x858 <Gpio_PinWrite+0x12e>
     83e:	82 e3       	ldi	r24, 0x32	; 50
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	22 e3       	ldi	r18, 0x32	; 50
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	32 2f       	mov	r19, r18
     84c:	2a 81       	ldd	r18, Y+2	; 0x02
     84e:	20 95       	com	r18
     850:	23 23       	and	r18, r19
     852:	fc 01       	movw	r30, r24
     854:	20 83       	st	Z, r18
     856:	00 00       	nop
     858:	00 00       	nop
     85a:	00 00       	nop
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <Gpio_PinToggle>:
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <Gpio_PinToggle+0x6>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	6a 83       	std	Y+2, r22	; 0x02
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	91 05       	cpc	r25, r1
     880:	b9 f0       	breq	.+46     	; 0x8b0 <Gpio_PinToggle+0x48>
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	91 05       	cpc	r25, r1
     886:	1c f4       	brge	.+6      	; 0x88e <Gpio_PinToggle+0x26>
     888:	89 2b       	or	r24, r25
     88a:	39 f0       	breq	.+14     	; 0x89a <Gpio_PinToggle+0x32>
     88c:	32 c0       	rjmp	.+100    	; 0x8f2 <Gpio_PinToggle+0x8a>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	91 05       	cpc	r25, r1
     892:	c9 f0       	breq	.+50     	; 0x8c6 <Gpio_PinToggle+0x5e>
     894:	03 97       	sbiw	r24, 0x03	; 3
     896:	11 f1       	breq	.+68     	; 0x8dc <Gpio_PinToggle+0x74>
     898:	2c c0       	rjmp	.+88     	; 0x8f2 <Gpio_PinToggle+0x8a>
     89a:	8b e3       	ldi	r24, 0x3B	; 59
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2b e3       	ldi	r18, 0x3B	; 59
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	30 81       	ld	r19, Z
     8a6:	2a 81       	ldd	r18, Y+2	; 0x02
     8a8:	23 27       	eor	r18, r19
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	21 c0       	rjmp	.+66     	; 0x8f2 <Gpio_PinToggle+0x8a>
     8b0:	88 e3       	ldi	r24, 0x38	; 56
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	28 e3       	ldi	r18, 0x38	; 56
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	f9 01       	movw	r30, r18
     8ba:	30 81       	ld	r19, Z
     8bc:	2a 81       	ldd	r18, Y+2	; 0x02
     8be:	23 27       	eor	r18, r19
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
     8c4:	16 c0       	rjmp	.+44     	; 0x8f2 <Gpio_PinToggle+0x8a>
     8c6:	85 e3       	ldi	r24, 0x35	; 53
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	25 e3       	ldi	r18, 0x35	; 53
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	30 81       	ld	r19, Z
     8d2:	2a 81       	ldd	r18, Y+2	; 0x02
     8d4:	23 27       	eor	r18, r19
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <Gpio_PinToggle+0x8a>
     8dc:	82 e3       	ldi	r24, 0x32	; 50
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	22 e3       	ldi	r18, 0x32	; 50
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	30 81       	ld	r19, Z
     8e8:	2a 81       	ldd	r18, Y+2	; 0x02
     8ea:	23 27       	eor	r18, r19
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
     8f0:	00 00       	nop
     8f2:	00 00       	nop
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <Interrupts_On>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	8f e5       	ldi	r24, 0x5F	; 95
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	2f e5       	ldi	r18, 0x5F	; 95
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	20 68       	ori	r18, 0x80	; 128
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	00 00       	nop
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <SPI_Read>:
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	8f e2       	ldi	r24, 0x2F	; 47
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <__vector_12>:
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	0e 94 90 04 	call	0x920	; 0x920 <SPI_Read>
     966:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <Recived>
     96a:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Recived>
     96e:	68 2f       	mov	r22, r24
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 b2 02 	call	0x564	; 0x564 <Gpio_PortWrite>
     976:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Count_gBcm_Rx_Flag>
     97a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <Count_gBcm_Rx_Flag+0x1>
     97e:	89 2b       	or	r24, r25
     980:	51 f4       	brne	.+20     	; 0x996 <__vector_12+0x60>
     982:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Recived>
     986:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Time_Init>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <Count_gBcm_Rx_Flag+0x1>
     992:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <Count_gBcm_Rx_Flag>
     996:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Recived>
     99a:	88 2f       	mov	r24, r24
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a0 e0       	ldi	r26, 0x00	; 0
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <Speed>
     9a6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <Speed+0x1>
     9aa:	a0 93 e9 00 	sts	0x00E9, r26	; 0x8000e9 <Speed+0x2>
     9ae:	b0 93 ea 00 	sts	0x00EA, r27	; 0x8000ea <Speed+0x3>
     9b2:	00 00       	nop
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	0f 90       	pop	r0
     9d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <Timers_SetCounter>:
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	2d 97       	sbiw	r28, 0x0d	; 13
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	89 87       	std	Y+9, r24	; 0x09
     9f2:	4a 87       	std	Y+10, r20	; 0x0a
     9f4:	5b 87       	std	Y+11, r21	; 0x0b
     9f6:	6c 87       	std	Y+12, r22	; 0x0c
     9f8:	7d 87       	std	Y+13, r23	; 0x0d
     9fa:	19 82       	std	Y+1, r1	; 0x01
     9fc:	1a 82       	std	Y+2, r1	; 0x02
     9fe:	1b 82       	std	Y+3, r1	; 0x03
     a00:	1c 82       	std	Y+4, r1	; 0x04
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	91 05       	cpc	r25, r1
     a0c:	09 f4       	brne	.+2      	; 0xa10 <Timers_SetCounter+0x34>
     a0e:	61 c0       	rjmp	.+194    	; 0xad2 <Timers_SetCounter+0xf6>
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	91 05       	cpc	r25, r1
     a14:	09 f4       	brne	.+2      	; 0xa18 <Timers_SetCounter+0x3c>
     a16:	bd c0       	rjmp	.+378    	; 0xb92 <Timers_SetCounter+0x1b6>
     a18:	89 2b       	or	r24, r25
     a1a:	09 f0       	breq	.+2      	; 0xa1e <Timers_SetCounter+0x42>
     a1c:	14 c1       	rjmp	.+552    	; 0xc46 <Timers_SetCounter+0x26a>
     a1e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Gv_PrescallerTimer0_AbsoluteValue>
     a22:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     a26:	cc 01       	movw	r24, r24
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	9c 01       	movw	r18, r24
     a2e:	ad 01       	movw	r20, r26
     a30:	60 e4       	ldi	r22, 0x40	; 64
     a32:	72 e4       	ldi	r23, 0x42	; 66
     a34:	8f e0       	ldi	r24, 0x0F	; 15
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 b8 07 	call	0xf70	; 0xf70 <__mulsi3>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <Gv_F_CPU>
     a44:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <Gv_F_CPU+0x1>
     a48:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <Gv_F_CPU+0x2>
     a4c:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <Gv_F_CPU+0x3>
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     a58:	da 01       	movw	r26, r20
     a5a:	c9 01       	movw	r24, r18
     a5c:	9c 01       	movw	r18, r24
     a5e:	ad 01       	movw	r20, r26
     a60:	8a 85       	ldd	r24, Y+10	; 0x0a
     a62:	9b 85       	ldd	r25, Y+11	; 0x0b
     a64:	ac 85       	ldd	r26, Y+12	; 0x0c
     a66:	bd 85       	ldd	r27, Y+13	; 0x0d
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     a70:	da 01       	movw	r26, r20
     a72:	c9 01       	movw	r24, r18
     a74:	8d 83       	std	Y+5, r24	; 0x05
     a76:	9e 83       	std	Y+6, r25	; 0x06
     a78:	af 83       	std	Y+7, r26	; 0x07
     a7a:	b8 87       	std	Y+8, r27	; 0x08
     a7c:	8d 81       	ldd	r24, Y+5	; 0x05
     a7e:	9e 81       	ldd	r25, Y+6	; 0x06
     a80:	af 81       	ldd	r26, Y+7	; 0x07
     a82:	b8 85       	ldd	r27, Y+8	; 0x08
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	91 40       	sbci	r25, 0x01	; 1
     a88:	a1 05       	cpc	r26, r1
     a8a:	b1 05       	cpc	r27, r1
     a8c:	28 f0       	brcs	.+10     	; 0xa98 <Timers_SetCounter+0xbc>
     a8e:	19 82       	std	Y+1, r1	; 0x01
     a90:	1a 82       	std	Y+2, r1	; 0x02
     a92:	1b 82       	std	Y+3, r1	; 0x03
     a94:	1c 82       	std	Y+4, r1	; 0x04
     a96:	dc c0       	rjmp	.+440    	; 0xc50 <Timers_SetCounter+0x274>
     a98:	8d 81       	ldd	r24, Y+5	; 0x05
     a9a:	9e 81       	ldd	r25, Y+6	; 0x06
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	31 e0       	ldi	r19, 0x01	; 1
     aa0:	a9 01       	movw	r20, r18
     aa2:	48 1b       	sub	r20, r24
     aa4:	59 0b       	sbc	r21, r25
     aa6:	ca 01       	movw	r24, r20
     aa8:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Gv_Count+0x1>
     aac:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <Gv_Count>
     ab0:	82 e5       	ldi	r24, 0x52	; 82
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <Gv_Count>
     ab8:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <Gv_Count+0x1>
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	ab 83       	std	Y+3, r26	; 0x03
     ace:	bc 83       	std	Y+4, r27	; 0x04
     ad0:	bf c0       	rjmp	.+382    	; 0xc50 <Timers_SetCounter+0x274>
     ad2:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <Gv_PrescallerTimer1_AbsoluteValue>
     ad6:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     ada:	cc 01       	movw	r24, r24
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9c 01       	movw	r18, r24
     ae2:	ad 01       	movw	r20, r26
     ae4:	60 e4       	ldi	r22, 0x40	; 64
     ae6:	72 e4       	ldi	r23, 0x42	; 66
     ae8:	8f e0       	ldi	r24, 0x0F	; 15
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 b8 07 	call	0xf70	; 0xf70 <__mulsi3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <Gv_F_CPU>
     af8:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <Gv_F_CPU+0x1>
     afc:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <Gv_F_CPU+0x2>
     b00:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <Gv_F_CPU+0x3>
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     b0c:	da 01       	movw	r26, r20
     b0e:	c9 01       	movw	r24, r18
     b10:	9c 01       	movw	r18, r24
     b12:	ad 01       	movw	r20, r26
     b14:	8a 85       	ldd	r24, Y+10	; 0x0a
     b16:	9b 85       	ldd	r25, Y+11	; 0x0b
     b18:	ac 85       	ldd	r26, Y+12	; 0x0c
     b1a:	bd 85       	ldd	r27, Y+13	; 0x0d
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     b24:	da 01       	movw	r26, r20
     b26:	c9 01       	movw	r24, r18
     b28:	8d 83       	std	Y+5, r24	; 0x05
     b2a:	9e 83       	std	Y+6, r25	; 0x06
     b2c:	af 83       	std	Y+7, r26	; 0x07
     b2e:	b8 87       	std	Y+8, r27	; 0x08
     b30:	8d 81       	ldd	r24, Y+5	; 0x05
     b32:	9e 81       	ldd	r25, Y+6	; 0x06
     b34:	af 81       	ldd	r26, Y+7	; 0x07
     b36:	b8 85       	ldd	r27, Y+8	; 0x08
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	a1 40       	sbci	r26, 0x01	; 1
     b3c:	b1 05       	cpc	r27, r1
     b3e:	28 f0       	brcs	.+10     	; 0xb4a <Timers_SetCounter+0x16e>
     b40:	19 82       	std	Y+1, r1	; 0x01
     b42:	1a 82       	std	Y+2, r1	; 0x02
     b44:	1b 82       	std	Y+3, r1	; 0x03
     b46:	1c 82       	std	Y+4, r1	; 0x04
     b48:	83 c0       	rjmp	.+262    	; 0xc50 <Timers_SetCounter+0x274>
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
     b4c:	9e 81       	ldd	r25, Y+6	; 0x06
     b4e:	91 95       	neg	r25
     b50:	81 95       	neg	r24
     b52:	91 09       	sbc	r25, r1
     b54:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Gv_Count+0x1>
     b58:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <Gv_Count>
     b5c:	8d e4       	ldi	r24, 0x4D	; 77
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <Gv_Count>
     b64:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <Gv_Count+0x1>
     b68:	23 2f       	mov	r18, r19
     b6a:	33 27       	eor	r19, r19
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
     b70:	8c e4       	ldi	r24, 0x4C	; 76
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <Gv_Count>
     b78:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <Gv_Count+0x1>
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	ab 83       	std	Y+3, r26	; 0x03
     b8e:	bc 83       	std	Y+4, r27	; 0x04
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <Timers_SetCounter+0x274>
     b92:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <Gv_PrescallerTimer2_AbsoluteValue>
     b96:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     b9a:	cc 01       	movw	r24, r24
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9c 01       	movw	r18, r24
     ba2:	ad 01       	movw	r20, r26
     ba4:	60 e4       	ldi	r22, 0x40	; 64
     ba6:	72 e4       	ldi	r23, 0x42	; 66
     ba8:	8f e0       	ldi	r24, 0x0F	; 15
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 b8 07 	call	0xf70	; 0xf70 <__mulsi3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <Gv_F_CPU>
     bb8:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <Gv_F_CPU+0x1>
     bbc:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <Gv_F_CPU+0x2>
     bc0:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <Gv_F_CPU+0x3>
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     bcc:	da 01       	movw	r26, r20
     bce:	c9 01       	movw	r24, r18
     bd0:	9c 01       	movw	r18, r24
     bd2:	ad 01       	movw	r20, r26
     bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     bd8:	ac 85       	ldd	r26, Y+12	; 0x0c
     bda:	bd 85       	ldd	r27, Y+13	; 0x0d
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     be4:	da 01       	movw	r26, r20
     be6:	c9 01       	movw	r24, r18
     be8:	8d 83       	std	Y+5, r24	; 0x05
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	af 83       	std	Y+7, r26	; 0x07
     bee:	b8 87       	std	Y+8, r27	; 0x08
     bf0:	8d 81       	ldd	r24, Y+5	; 0x05
     bf2:	9e 81       	ldd	r25, Y+6	; 0x06
     bf4:	af 81       	ldd	r26, Y+7	; 0x07
     bf6:	b8 85       	ldd	r27, Y+8	; 0x08
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	91 40       	sbci	r25, 0x01	; 1
     bfc:	a1 05       	cpc	r26, r1
     bfe:	b1 05       	cpc	r27, r1
     c00:	28 f0       	brcs	.+10     	; 0xc0c <Timers_SetCounter+0x230>
     c02:	19 82       	std	Y+1, r1	; 0x01
     c04:	1a 82       	std	Y+2, r1	; 0x02
     c06:	1b 82       	std	Y+3, r1	; 0x03
     c08:	1c 82       	std	Y+4, r1	; 0x04
     c0a:	22 c0       	rjmp	.+68     	; 0xc50 <Timers_SetCounter+0x274>
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	31 e0       	ldi	r19, 0x01	; 1
     c14:	a9 01       	movw	r20, r18
     c16:	48 1b       	sub	r20, r24
     c18:	59 0b       	sbc	r21, r25
     c1a:	ca 01       	movw	r24, r20
     c1c:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Gv_Count+0x1>
     c20:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <Gv_Count>
     c24:	84 e4       	ldi	r24, 0x44	; 68
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <Gv_Count>
     c2c:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <Gv_Count+0x1>
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	ab 83       	std	Y+3, r26	; 0x03
     c42:	bc 83       	std	Y+4, r27	; 0x04
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <Timers_SetCounter+0x274>
     c46:	19 82       	std	Y+1, r1	; 0x01
     c48:	1a 82       	std	Y+2, r1	; 0x02
     c4a:	1b 82       	std	Y+3, r1	; 0x03
     c4c:	1c 82       	std	Y+4, r1	; 0x04
     c4e:	00 00       	nop
     c50:	8a 85       	ldd	r24, Y+10	; 0x0a
     c52:	9b 85       	ldd	r25, Y+11	; 0x0b
     c54:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Gv_Count+0x1>
     c58:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <Gv_Count>
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	2d 96       	adiw	r28, 0x0d	; 13
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <__vector_9>:
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <Timer_gBcm_Rx_Flag>
     ca2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <Gv_Count>
     ca6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <Gv_Count+0x1>
     caa:	cc 01       	movw	r24, r24
     cac:	a0 e0       	ldi	r26, 0x00	; 0
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ac 01       	movw	r20, r24
     cb2:	bd 01       	movw	r22, r26
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Timers_SetCounter>
     cba:	00 00       	nop
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <UART_Init>:
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <UART_Init+0xe>
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <UART_Init+0x10>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <UART_Cfg_s+0x9>
     d04:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <UART_Cfg_s+0xa>
     d08:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <UART_Cfg_s+0xb>
     d0c:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <UART_Cfg_s+0xc>
     d10:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <UART_Cfg_s>
     d14:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <UART_Cfg_s+0x1>
     d18:	a0 91 6b 00 	lds	r26, 0x006B	; 0x80006b <UART_Cfg_s+0x2>
     d1c:	b0 91 6c 00 	lds	r27, 0x006C	; 0x80006c <UART_Cfg_s+0x3>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	aa 1f       	adc	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	aa 1f       	adc	r26, r26
     d3e:	bb 1f       	adc	r27, r27
     d40:	7c 01       	movw	r14, r24
     d42:	8d 01       	movw	r16, r26
     d44:	ca 01       	movw	r24, r20
     d46:	b9 01       	movw	r22, r18
     d48:	a8 01       	movw	r20, r16
     d4a:	97 01       	movw	r18, r14
     d4c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     d50:	da 01       	movw	r26, r20
     d52:	c9 01       	movw	r24, r18
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	8a 83       	std	Y+2, r24	; 0x02
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	84 60       	ori	r24, 0x04	; 4
     d6a:	8a 83       	std	Y+2, r24	; 0x02
     d6c:	8a e2       	ldi	r24, 0x2A	; 42
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	2a e2       	ldi	r18, 0x2A	; 42
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	f9 01       	movw	r30, r18
     d76:	20 81       	ld	r18, Z
     d78:	2b 7f       	andi	r18, 0xFB	; 251
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
     d7e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <UART_Cfg_s+0x4>
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	61 f0       	breq	.+24     	; 0xda2 <UART_Init+0xbe>
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	a1 f4       	brne	.+40     	; 0xdb6 <UART_Init+0xd2>
     d8e:	8a e2       	ldi	r24, 0x2A	; 42
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	2a e2       	ldi	r18, 0x2A	; 42
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	20 61       	ori	r18, 0x10	; 16
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
     da0:	0c c0       	rjmp	.+24     	; 0xdba <UART_Init+0xd6>
     da2:	8a e2       	ldi	r24, 0x2A	; 42
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	2a e2       	ldi	r18, 0x2A	; 42
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	f9 01       	movw	r30, r18
     dac:	20 81       	ld	r18, Z
     dae:	2f 7e       	andi	r18, 0xEF	; 239
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <UART_Init+0xd6>
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	00 00       	nop
     dba:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <UART_Cfg_s+0x5>
     dbe:	88 2f       	mov	r24, r24
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	61 f0       	breq	.+24     	; 0xdde <UART_Init+0xfa>
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	a1 f4       	brne	.+40     	; 0xdf2 <UART_Init+0x10e>
     dca:	8a e2       	ldi	r24, 0x2A	; 42
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	2a e2       	ldi	r18, 0x2A	; 42
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	20 81       	ld	r18, Z
     dd6:	28 60       	ori	r18, 0x08	; 8
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
     ddc:	0c c0       	rjmp	.+24     	; 0xdf6 <UART_Init+0x112>
     dde:	8a e2       	ldi	r24, 0x2A	; 42
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	2a e2       	ldi	r18, 0x2A	; 42
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	20 81       	ld	r18, Z
     dea:	27 7f       	andi	r18, 0xF7	; 247
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <UART_Init+0x112>
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	00 00       	nop
     df6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <UART_Cfg_s+0x6>
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 05       	cpc	r25, r1
     e02:	61 f0       	breq	.+24     	; 0xe1c <UART_Init+0x138>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	91 05       	cpc	r25, r1
     e08:	81 f0       	breq	.+32     	; 0xe2a <UART_Init+0x146>
     e0a:	89 2b       	or	r24, r25
     e0c:	a9 f4       	brne	.+42     	; 0xe38 <UART_Init+0x154>
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	8f 7e       	andi	r24, 0xEF	; 239
     e12:	8a 83       	std	Y+2, r24	; 0x02
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <UART_Init+0x158>
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	8f 7e       	andi	r24, 0xEF	; 239
     e20:	8a 83       	std	Y+2, r24	; 0x02
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	80 62       	ori	r24, 0x20	; 32
     e26:	8a 83       	std	Y+2, r24	; 0x02
     e28:	09 c0       	rjmp	.+18     	; 0xe3c <UART_Init+0x158>
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	80 62       	ori	r24, 0x20	; 32
     e34:	8a 83       	std	Y+2, r24	; 0x02
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <UART_Init+0x158>
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	00 00       	nop
     e3c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <UART_Cfg_s+0x7>
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	91 05       	cpc	r25, r1
     e48:	19 f0       	breq	.+6      	; 0xe50 <UART_Init+0x16c>
     e4a:	02 97       	sbiw	r24, 0x02	; 2
     e4c:	29 f0       	breq	.+10     	; 0xe58 <UART_Init+0x174>
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <UART_Init+0x17c>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <UART_Init+0x180>
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	8a 83       	std	Y+2, r24	; 0x02
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <UART_Init+0x180>
     e60:	19 82       	std	Y+1, r1	; 0x01
     e62:	00 00       	nop
     e64:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <UART_Cfg_s+0x8>
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	61 f0       	breq	.+24     	; 0xe88 <UART_Init+0x1a4>
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	a1 f4       	brne	.+40     	; 0xe9c <UART_Init+0x1b8>
     e74:	8a e2       	ldi	r24, 0x2A	; 42
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	2a e2       	ldi	r18, 0x2A	; 42
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	f9 01       	movw	r30, r18
     e7e:	20 81       	ld	r18, Z
     e80:	20 68       	ori	r18, 0x80	; 128
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <UART_Init+0x1bc>
     e88:	8a e2       	ldi	r24, 0x2A	; 42
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	2a e2       	ldi	r18, 0x2A	; 42
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	2f 77       	andi	r18, 0x7F	; 127
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <UART_Init+0x1bc>
     e9c:	19 82       	std	Y+1, r1	; 0x01
     e9e:	00 00       	nop
     ea0:	80 e4       	ldi	r24, 0x40	; 64
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	2a 81       	ldd	r18, Y+2	; 0x02
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 83       	st	Z, r18
     eaa:	89 e2       	ldi	r24, 0x29	; 41
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2b 81       	ldd	r18, Y+3	; 0x03
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	80 e4       	ldi	r24, 0x40	; 64
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	23 2f       	mov	r18, r19
     ebe:	33 27       	eor	r19, r19
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	08 95       	ret

00000edc <UART_SetCallBack>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <UART_SetCallBack+0x6>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <gPtrCallBk+0x1>
     ef2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <gPtrCallBk>
     ef6:	00 00       	nop
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <__vector_13>:
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <gPtrCallBk>
     f32:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <gPtrCallBk+0x1>
     f36:	89 2b       	or	r24, r25
     f38:	31 f0       	breq	.+12     	; 0xf46 <__vector_13+0x44>
     f3a:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <gPtrCallBk>
     f3e:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <gPtrCallBk+0x1>
     f42:	fc 01       	movw	r30, r24
     f44:	09 95       	icall
     f46:	00 00       	nop
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__mulsi3>:
     f70:	db 01       	movw	r26, r22
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__muluhisi3>
     f7a:	bf 91       	pop	r27
     f7c:	af 91       	pop	r26
     f7e:	a2 9f       	mul	r26, r18
     f80:	80 0d       	add	r24, r0
     f82:	91 1d       	adc	r25, r1
     f84:	a3 9f       	mul	r26, r19
     f86:	90 0d       	add	r25, r0
     f88:	b2 9f       	mul	r27, r18
     f8a:	90 0d       	add	r25, r0
     f8c:	11 24       	eor	r1, r1
     f8e:	08 95       	ret

00000f90 <__udivmodsi4>:
     f90:	a1 e2       	ldi	r26, 0x21	; 33
     f92:	1a 2e       	mov	r1, r26
     f94:	aa 1b       	sub	r26, r26
     f96:	bb 1b       	sub	r27, r27
     f98:	fd 01       	movw	r30, r26
     f9a:	0d c0       	rjmp	.+26     	; 0xfb6 <__udivmodsi4_ep>

00000f9c <__udivmodsi4_loop>:
     f9c:	aa 1f       	adc	r26, r26
     f9e:	bb 1f       	adc	r27, r27
     fa0:	ee 1f       	adc	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	a2 17       	cp	r26, r18
     fa6:	b3 07       	cpc	r27, r19
     fa8:	e4 07       	cpc	r30, r20
     faa:	f5 07       	cpc	r31, r21
     fac:	20 f0       	brcs	.+8      	; 0xfb6 <__udivmodsi4_ep>
     fae:	a2 1b       	sub	r26, r18
     fb0:	b3 0b       	sbc	r27, r19
     fb2:	e4 0b       	sbc	r30, r20
     fb4:	f5 0b       	sbc	r31, r21

00000fb6 <__udivmodsi4_ep>:
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	1a 94       	dec	r1
     fc0:	69 f7       	brne	.-38     	; 0xf9c <__udivmodsi4_loop>
     fc2:	60 95       	com	r22
     fc4:	70 95       	com	r23
     fc6:	80 95       	com	r24
     fc8:	90 95       	com	r25
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	bd 01       	movw	r22, r26
     fd0:	cf 01       	movw	r24, r30
     fd2:	08 95       	ret

00000fd4 <__muluhisi3>:
     fd4:	0e 94 f5 07 	call	0xfea	; 0xfea <__umulhisi3>
     fd8:	a5 9f       	mul	r26, r21
     fda:	90 0d       	add	r25, r0
     fdc:	b4 9f       	mul	r27, r20
     fde:	90 0d       	add	r25, r0
     fe0:	a4 9f       	mul	r26, r20
     fe2:	80 0d       	add	r24, r0
     fe4:	91 1d       	adc	r25, r1
     fe6:	11 24       	eor	r1, r1
     fe8:	08 95       	ret

00000fea <__umulhisi3>:
     fea:	a2 9f       	mul	r26, r18
     fec:	b0 01       	movw	r22, r0
     fee:	b3 9f       	mul	r27, r19
     ff0:	c0 01       	movw	r24, r0
     ff2:	a3 9f       	mul	r26, r19
     ff4:	70 0d       	add	r23, r0
     ff6:	81 1d       	adc	r24, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	91 1d       	adc	r25, r1
     ffc:	b2 9f       	mul	r27, r18
     ffe:	70 0d       	add	r23, r0
    1000:	81 1d       	adc	r24, r1
    1002:	11 24       	eor	r1, r1
    1004:	91 1d       	adc	r25, r1
    1006:	08 95       	ret

00001008 <_exit>:
    1008:	f8 94       	cli

0000100a <__stop_program>:
    100a:	ff cf       	rjmp	.-2      	; 0x100a <__stop_program>
